# config/services.yaml
services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

        bind:
            # cuando inyectemos una variable que se llame $roleValidators va a estar etiquetada
            # con app.role_validator
            # esto le permitir√° a symfony inyectar un iterable $roleValidators siempre que se pase a un constructor
            # esta variable en este caso a un listener: UserPreWriteListener(EncoderFactoryInterface $encoderFactory, iterable $roleValidators)
            $roleValidators: !tagged app.role_validator

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    #App\Controller\:
    App\Api\:
        #resource: '../src/Controller'
        resource: "../src/Api"
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\Api\Listener\JsonExceptionResponseTransformerListener:
        tags:
            - { name: kernel.event_listener, event: kernel.exception, method: onKernelException, priority: 100 }

    # https://api-platform.com/docs/core/events/#built-in-event-listeners
    # todas las clases que sean instancia de una determinada clase o interfaz tengan un comportamiento
    _instanceof:
        # todas las clases que implementen esta interfaz ejecutaran el metodo onKernelView antes de escribir en la bd
        App\Api\Listener\PreWriteListener:
            tags:
                # PreWriteListener.onKernelView(ViewEvent):void
                - { name: kernel.event_listener, event: kernel.view, method: onKernelView, priority: 33 }

        # todas las clases que implementen esta interfaz van a tener este tag: app.role_validator
        App\Security\Validator\Role\RoleValidator:
            tags: [ 'app.role_validator' ]

